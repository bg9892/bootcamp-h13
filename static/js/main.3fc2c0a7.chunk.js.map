{"version":3,"sources":["components/TableBody/index.js","components/Table/index.js","components/Navbar/index.js","App.js","serviceWorker.js","index.js"],"names":["TableBody","props","sortClicked","sort","employees","a","b","salary","id","title","filter","employee","toUpperCase","slice","map","info","key","firstname","lastname","Table","className","scope","Navbar","state","handleChange","evt","value","target","setState","sortBySalary","preventDefault","reset","onChange","this","type","placeholder","aria-label","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mpCAoDeA,MAlDf,SAAmBC,GA2CjB,OAzCIA,EAAMC,YACJD,EAAME,KACRF,EAAMG,UAAUD,MAAK,SAACE,EAAGC,GAAJ,OAAWD,EAAEE,OAASD,EAAEC,OAAU,GAAK,KAE5DN,EAAMG,UAAUD,MAAK,SAACE,EAAGC,GAAJ,OAAWD,EAAEE,OAASD,EAAEC,OAAU,GAAK,KAG9DN,EAAMG,UAAUD,MAAK,SAACE,EAAGC,GAAJ,OAAWD,EAAEG,GAAKF,EAAEE,GAAM,GAAK,KAmCpD,+BA/BIP,EAAMQ,MACMR,EAAMG,UAAUM,QAC5B,SAAAC,GAAQ,OAAIA,EAASF,QAAUR,EAAMQ,MAAM,GAAGG,cAAgBX,EAAMQ,MAAMI,MAAM,MAG1EC,KAAI,SAAAC,GACR,OAAO,wBAAIC,IAAKD,EAAKP,IACnB,4BAAKO,EAAKP,IACV,4BAAKO,EAAKE,WACV,4BAAKF,EAAKG,UACV,4BAAKH,EAAKN,OACV,4BAAKM,EAAKR,YAMdN,EAAMG,UAAUU,KAAI,SAAAC,GAClB,OAAO,wBAAIC,IAAKD,EAAKP,IACnB,4BAAKO,EAAKP,IACV,4BAAKO,EAAKE,WACV,4BAAKF,EAAKG,UACV,4BAAKH,EAAKN,OACV,4BAAKM,EAAKR,cCbPY,MAtBf,SAAelB,GACb,OACE,2BAAOmB,UAAU,kCACf,+BACE,4BACE,wBAAIC,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,YAGJ,kBAAC,EAAD,CACEL,IAAKf,EAAMG,UAAUI,GACrBJ,UAAWH,EAAMG,UACjBK,MAAOR,EAAMQ,MACbN,KAAMF,EAAME,KACZD,YAAaD,EAAMC,gB,OC4CZoB,E,4MA3DbC,MAAQ,CACNd,MAAO,GACPN,MAAM,EACND,aAAa,G,EAGfsB,aAAe,SAAAC,GACb,IAAMC,EAAQD,EAAIE,OAAOD,MACzB,EAAKE,SAAS,CACZnB,MAAOiB,K,EAIXG,aAAe,SAAAJ,GACbA,EAAIK,iBAEA,EAAKP,MAAMpB,KACb,EAAKyB,SAAS,CACZzB,MAAM,IAGR,EAAKyB,SAAS,CACZzB,MAAM,IAGV,EAAKyB,SAAS,CACZ1B,aAAa,K,EAIjB6B,MAAQ,SAAAN,GACNA,EAAIK,iBACJ,EAAKF,SAAS,CACZ1B,aAAa,K,uDAKf,OACE,6BACE,yBAAKkB,UAAU,8BACb,0BAAMA,UAAU,wBAAhB,sBACA,0BAAMA,UAAU,eACd,2BAAOY,SAAUC,KAAKT,aAAcJ,UAAU,uBAAuBc,KAAK,SAASC,YAAY,kBAAkBC,aAAW,WAC5H,4BAAQC,QAASJ,KAAKJ,aAAcT,UAAU,4CAA4Cc,KAAK,UAA/F,kBACA,4BAAQG,QAASJ,KAAKF,MAAOX,UAAU,4CAA4Cc,KAAK,UAAxF,WAGJ,kBAAC,EAAD,CACElB,IAAKZ,EAAUI,GACfJ,UAAWA,EACXK,MAAOwB,KAAKV,MAAMd,MAClBN,KAAM8B,KAAKV,MAAMpB,KACjBD,YAAa+B,KAAKV,MAAMrB,mB,GAtDboC,aCSNC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3fc2c0a7.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction TableBody(props) {\n\n  if (props.sortClicked) {\n    if (props.sort) {\n      props.employees.sort((a, b) => (a.salary > b.salary) ? 1 : -1);\n    } else {\n      props.employees.sort((a, b) => (a.salary < b.salary) ? 1 : -1);\n    }\n  } else {\n    props.employees.sort((a, b) => (a.id > b.id) ? 1 : -1);\n  }\n\n  function employees() {\n    if (props.title) {\n      const title = props.employees.filter(\n        employee => employee.title === props.title[0].toUpperCase() + props.title.slice(1)\n      );\n      return (\n        title.map(info => {\n          return <tr key={info.id}>\n            <td>{info.id}</td>\n            <td>{info.firstname}</td>\n            <td>{info.lastname}</td>\n            <td>{info.title}</td>\n            <td>{info.salary}</td>\n          </tr>\n        })\n      )\n    } else {\n      return (\n        props.employees.map(info => {\n          return <tr key={info.id}>\n            <td>{info.id}</td>\n            <td>{info.firstname}</td>\n            <td>{info.lastname}</td>\n            <td>{info.title}</td>\n            <td>{info.salary}</td>\n          </tr>\n        })\n      )\n    }\n  }\n\n  return (\n    <tbody>\n      {employees()}\n    </tbody>\n  )\n};\n\nexport default TableBody;","import React from \"react\";\nimport TableBody from \"../TableBody\";\n\nfunction Table(props) {\n  return (\n    <table className=\"table table-striped table-dark\">\n      <thead>\n        <tr>\n          <th scope=\"col\">#</th>\n          <th scope=\"col\">First</th>\n          <th scope=\"col\">Last</th>\n          <th scope=\"col\">Title</th>\n          <th scope=\"col\">Salary</th>\n        </tr>\n      </thead>\n      <TableBody\n        key={props.employees.id}\n        employees={props.employees}\n        title={props.title}\n        sort={props.sort}\n        sortClicked={props.sortClicked} />\n    </table>\n  );\n}\n\nexport default Table;","import React, { Component } from \"react\";\nimport Table from '../Table';\nimport employees from \"../../employees.json\";\n\nclass Navbar extends Component {\n  state = {\n    title: \"\",\n    sort: false,\n    sortClicked: false\n  };\n\n  handleChange = evt => {\n    const value = evt.target.value;\n    this.setState({\n      title: value\n    });\n  }\n\n  sortBySalary = evt => {\n    evt.preventDefault();\n\n    if (this.state.sort) {\n      this.setState({\n        sort: false\n      })\n    } else {\n      this.setState({\n        sort: true\n      })\n    }\n    this.setState({\n      sortClicked: true\n    })\n  }\n\n  reset = evt => {\n    evt.preventDefault();\n    this.setState({\n      sortClicked: false\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-dark bg-dark\">\n          <span className=\"navbar-brand mb-0 h1\">Employee Directory</span>\n          <form className=\"form-inline\">\n            <input onChange={this.handleChange} className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Filter By Title\" aria-label=\"Search\" />\n            <button onClick={this.sortBySalary} className=\"btn btn-outline-success my-2 my-sm-0 ml-5\" type=\"submit\">Sort By Salary</button>\n            <button onClick={this.reset} className=\"btn btn-outline-success my-2 my-sm-0 ml-5\" type=\"submit\">Reset</button>\n          </form>\n        </nav>\n        <Table\n          key={employees.id}\n          employees={employees}\n          title={this.state.title}\n          sort={this.state.sort}\n          sortClicked={this.state.sortClicked} />\n      </div>\n    );\n  }\n}\n\nexport default Navbar;","import React from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\n\n\nfunction App() {\n  return (\n    <div>\n      <Navbar />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}